// Generated by gencpp from file geometry_constraints/geom_constrResponse.msg
// DO NOT EDIT!


#ifndef GEOMETRY_CONSTRAINTS_MESSAGE_GEOM_CONSTRRESPONSE_H
#define GEOMETRY_CONSTRAINTS_MESSAGE_GEOM_CONSTRRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace geometry_constraints
{
template <class ContainerAllocator>
struct geom_constrResponse_
{
  typedef geom_constrResponse_<ContainerAllocator> Type;

  geom_constrResponse_()
    : x_out()
    , y_out()
    , z_out()
    , ok()  {
      x_out.assign(0.0);

      y_out.assign(0.0);

      z_out.assign(0.0);

      ok.assign(false);
  }
  geom_constrResponse_(const ContainerAllocator& _alloc)
    : x_out()
    , y_out()
    , z_out()
    , ok()  {
  (void)_alloc;
      x_out.assign(0.0);

      y_out.assign(0.0);

      z_out.assign(0.0);

      ok.assign(false);
  }



   typedef boost::array<double, 6>  _x_out_type;
  _x_out_type x_out;

   typedef boost::array<double, 6>  _y_out_type;
  _y_out_type y_out;

   typedef boost::array<double, 6>  _z_out_type;
  _z_out_type z_out;

   typedef boost::array<uint8_t, 6>  _ok_type;
  _ok_type ok;





  typedef boost::shared_ptr< ::geometry_constraints::geom_constrResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::geometry_constraints::geom_constrResponse_<ContainerAllocator> const> ConstPtr;

}; // struct geom_constrResponse_

typedef ::geometry_constraints::geom_constrResponse_<std::allocator<void> > geom_constrResponse;

typedef boost::shared_ptr< ::geometry_constraints::geom_constrResponse > geom_constrResponsePtr;
typedef boost::shared_ptr< ::geometry_constraints::geom_constrResponse const> geom_constrResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::geometry_constraints::geom_constrResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::geometry_constraints::geom_constrResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace geometry_constraints

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::geometry_constraints::geom_constrResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::geometry_constraints::geom_constrResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::geometry_constraints::geom_constrResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::geometry_constraints::geom_constrResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::geometry_constraints::geom_constrResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::geometry_constraints::geom_constrResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::geometry_constraints::geom_constrResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2c572ceab70624218e2910dbae6f1f96";
  }

  static const char* value(const ::geometry_constraints::geom_constrResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2c572ceab7062421ULL;
  static const uint64_t static_value2 = 0x8e2910dbae6f1f96ULL;
};

template<class ContainerAllocator>
struct DataType< ::geometry_constraints::geom_constrResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_constraints/geom_constrResponse";
  }

  static const char* value(const ::geometry_constraints::geom_constrResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::geometry_constraints::geom_constrResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[6] x_out\n\
float64[6] y_out\n\
float64[6] z_out\n\
bool[6] ok\n\
\n\
";
  }

  static const char* value(const ::geometry_constraints::geom_constrResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::geometry_constraints::geom_constrResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_out);
      stream.next(m.y_out);
      stream.next(m.z_out);
      stream.next(m.ok);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct geom_constrResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::geometry_constraints::geom_constrResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::geometry_constraints::geom_constrResponse_<ContainerAllocator>& v)
  {
    s << indent << "x_out[]" << std::endl;
    for (size_t i = 0; i < v.x_out.size(); ++i)
    {
      s << indent << "  x_out[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x_out[i]);
    }
    s << indent << "y_out[]" << std::endl;
    for (size_t i = 0; i < v.y_out.size(); ++i)
    {
      s << indent << "  y_out[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.y_out[i]);
    }
    s << indent << "z_out[]" << std::endl;
    for (size_t i = 0; i < v.z_out.size(); ++i)
    {
      s << indent << "  z_out[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.z_out[i]);
    }
    s << indent << "ok[]" << std::endl;
    for (size_t i = 0; i < v.ok.size(); ++i)
    {
      s << indent << "  ok[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.ok[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GEOMETRY_CONSTRAINTS_MESSAGE_GEOM_CONSTRRESPONSE_H
