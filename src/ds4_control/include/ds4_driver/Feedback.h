// Generated by gencpp from file ds4_driver/Feedback.msg
// DO NOT EDIT!


#ifndef DS4_DRIVER_MESSAGE_FEEDBACK_H
#define DS4_DRIVER_MESSAGE_FEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ds4_driver
{
template <class ContainerAllocator>
struct Feedback_
{
  typedef Feedback_<ContainerAllocator> Type;

  Feedback_()
    : set_led(false)
    , led_r(0.0)
    , led_g(0.0)
    , led_b(0.0)
    , set_led_flash(false)
    , led_flash_on(0.0)
    , led_flash_off(0.0)
    , set_rumble(false)
    , rumble_duration(0.0)
    , rumble_small(0.0)
    , rumble_big(0.0)  {
    }
  Feedback_(const ContainerAllocator& _alloc)
    : set_led(false)
    , led_r(0.0)
    , led_g(0.0)
    , led_b(0.0)
    , set_led_flash(false)
    , led_flash_on(0.0)
    , led_flash_off(0.0)
    , set_rumble(false)
    , rumble_duration(0.0)
    , rumble_small(0.0)
    , rumble_big(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _set_led_type;
  _set_led_type set_led;

   typedef float _led_r_type;
  _led_r_type led_r;

   typedef float _led_g_type;
  _led_g_type led_g;

   typedef float _led_b_type;
  _led_b_type led_b;

   typedef uint8_t _set_led_flash_type;
  _set_led_flash_type set_led_flash;

   typedef float _led_flash_on_type;
  _led_flash_on_type led_flash_on;

   typedef float _led_flash_off_type;
  _led_flash_off_type led_flash_off;

   typedef uint8_t _set_rumble_type;
  _set_rumble_type set_rumble;

   typedef float _rumble_duration_type;
  _rumble_duration_type rumble_duration;

   typedef float _rumble_small_type;
  _rumble_small_type rumble_small;

   typedef float _rumble_big_type;
  _rumble_big_type rumble_big;





  typedef boost::shared_ptr< ::ds4_driver::Feedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ds4_driver::Feedback_<ContainerAllocator> const> ConstPtr;

}; // struct Feedback_

typedef ::ds4_driver::Feedback_<std::allocator<void> > Feedback;

typedef boost::shared_ptr< ::ds4_driver::Feedback > FeedbackPtr;
typedef boost::shared_ptr< ::ds4_driver::Feedback const> FeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ds4_driver::Feedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ds4_driver::Feedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ds4_driver

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ds4_driver': ['/home/yoggi/hexapod_ws/src/ds4_driver/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ds4_driver::Feedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ds4_driver::Feedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds4_driver::Feedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ds4_driver::Feedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds4_driver::Feedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ds4_driver::Feedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ds4_driver::Feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e6ff655a0461aca2c8725df811fe5c33";
  }

  static const char* value(const ::ds4_driver::Feedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe6ff655a0461aca2ULL;
  static const uint64_t static_value2 = 0xc8725df811fe5c33ULL;
};

template<class ContainerAllocator>
struct DataType< ::ds4_driver::Feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ds4_driver/Feedback";
  }

  static const char* value(const ::ds4_driver::Feedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ds4_driver::Feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message file for controlling DualShock4\n\
# LED intensities [0.0, 1.0]\n\
bool set_led\n\
float32 led_r\n\
float32 led_g\n\
float32 led_b\n\
\n\
# LED flash durations in seconds (max is 2.5 sec)\n\
bool set_led_flash\n\
# Note: Set led_flash_off to 0 to stop flashing\n\
float32 led_flash_on\n\
float32 led_flash_off\n\
\n\
# Rumble intensities [0.0, 1.0] (continues rumbling for 5 sec by default)\n\
bool set_rumble\n\
float32 rumble_duration\n\
float32 rumble_small\n\
float32 rumble_big\n\
";
  }

  static const char* value(const ::ds4_driver::Feedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ds4_driver::Feedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.set_led);
      stream.next(m.led_r);
      stream.next(m.led_g);
      stream.next(m.led_b);
      stream.next(m.set_led_flash);
      stream.next(m.led_flash_on);
      stream.next(m.led_flash_off);
      stream.next(m.set_rumble);
      stream.next(m.rumble_duration);
      stream.next(m.rumble_small);
      stream.next(m.rumble_big);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Feedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ds4_driver::Feedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ds4_driver::Feedback_<ContainerAllocator>& v)
  {
    s << indent << "set_led: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_led);
    s << indent << "led_r: ";
    Printer<float>::stream(s, indent + "  ", v.led_r);
    s << indent << "led_g: ";
    Printer<float>::stream(s, indent + "  ", v.led_g);
    s << indent << "led_b: ";
    Printer<float>::stream(s, indent + "  ", v.led_b);
    s << indent << "set_led_flash: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_led_flash);
    s << indent << "led_flash_on: ";
    Printer<float>::stream(s, indent + "  ", v.led_flash_on);
    s << indent << "led_flash_off: ";
    Printer<float>::stream(s, indent + "  ", v.led_flash_off);
    s << indent << "set_rumble: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_rumble);
    s << indent << "rumble_duration: ";
    Printer<float>::stream(s, indent + "  ", v.rumble_duration);
    s << indent << "rumble_small: ";
    Printer<float>::stream(s, indent + "  ", v.rumble_small);
    s << indent << "rumble_big: ";
    Printer<float>::stream(s, indent + "  ", v.rumble_big);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DS4_DRIVER_MESSAGE_FEEDBACK_H
