<?xml version="1.0"?>

<launch>
	<!-- We resume the logic in gazebo_ros package
	empty_world.launch,
	changing only the name of the world to be launched -->
	<include file="$(find gazebo_ros)/launch/empty_world.launch">
		<arg name="world_name" value="$(find hexapod_scarab)/worlds/two_cones.world"/>
		<arg name="paused" default="false"/>
		<arg name="use_sim_time" default="true"/>
		<arg name="gui" default="true"/>
		<arg name="headless" default="false"/>
		<arg name="debug" default="false"/>
	</include>

	<!-- Load the URDF into the ROS Parameter Server -->
	<arg name="model" default="$(find hexapod_scarab)/urdf/hexy_description.xacro"/>
	<param name="robot_description"	command="$(find xacro)/xacro --inorder $(arg model)"/>

	<!-- Spawn rrbot into Gazebo -->
	<node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"	args="-param robot_description -urdf -model hexapod_scarab"/>
	
	<!-- Load joint controller configurations from YAML file to
	parameter server -->
	<rosparam file="$(find hexapod_scarab)/config/hexy_control.yaml" command="load"/>

	<!-- load the controllers -->
	<node name="control_spawner" pkg="controller_manager"
			type="spawner" 
			respawn="false"
			output="screen" 
			ns="/hexapod_scarab" 
			args="joint_state_controller
					joint_coxa_R1_position_controller
					joint_femur_R1_position_controller
					joint_tibia_R1_position_controller
					joint_coxa_R2_position_controller
					joint_femur_R2_position_controller
					joint_tibia_R2_position_controller
					joint_coxa_R3_position_controller
					joint_femur_R3_position_controller
					joint_tibia_R3_position_controller
					joint_coxa_L1_position_controller
					joint_femur_L1_position_controller
					joint_tibia_L1_position_controller
					joint_coxa_L2_position_controller
					joint_femur_L2_position_controller
					joint_tibia_L2_position_controller
					joint_coxa_L3_position_controller
					joint_femur_L3_position_controller
					joint_tibia_L3_position_controller"/>

	<!-- convert joint states to TF transforms for rviz, etc -->
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
		<remap from="/joint_states" to="/hexapod_scarab/joint_states" />
	</node>

	<!-- load hexapod mechanical parameters -->
    <rosparam file="$(find hexy_lib)/config/hexy_mechanical_params.yaml" command="load"/>
    
	<!-- load other packages -->
	<node name="hexy_gazebo_publisher" pkg="hexy_gazebo_publisher" type="hexy_gazebo_publisher"/>
    <node name="leg_inv_kinematic" pkg="leg_inv_kinematic" type="leg_inv_kinematic"/>
    <node name="ds4_driver" pkg="ds4_driver" type="ds4_driver_node.py"/>
    <node name="ds4_control" pkg="ds4_control" type="ds4_control" output="screen"/>
    <node name="geometry_constraints" pkg="geometry_constraints" type="geometry_constraints"/>
</launch>
